// using namespace std; for naming convention and preventing naming issues 
//cout is a object (cookie) from class [ostream] (cookie cutter) -prints user input
//cin is an object (cookie ) from class [istream] -reads user input
//operators works 

#include <iostream>

using namespace std; //using directive 'std'-using standart namespace
using std::cout ;//


10 /// Using Functions 
main function -

argument -input 
function -machine 
output is the return 

/*

#include <iostream>
using std::cout;
using std::endl;
using std::cin;//console in

int main () //main function 


{
    int slices; //declaration initilization
    cout <<"Enter how many slices :";
    cin >>slices;
    std::cout <<"You have "<< slices  << " slices of pizza" << endl;
    int children =slices + 1;
    cout <<"Children have "<< children <<" slices off pizza" <<endl;  
}

*/


11// Creating Function 
function definition 
function declaration
header //can different class
definition  //can different class


in fuction (argument 1 ,argument 2) -argument 1 and 2 are stored in parameters 

/*
int main () //main function 


{
    int base, exponent; 
    cout <<"What is the base ?: ";
    cin >>base; 
    cout <<"What is the exponent?: ";
    cin>>exponent;

  double power = pow(base, exponent);
    cout << power<<endl;

}
*/


##### 


#### Creating a function 

#include <iostream>
#include<cmath>
using std::cout;
using std::endl;
using std::cin;//console in


//double power (double , int) -- declation [must be at the start of our program ]

/*double power (double base, int exponent ) // definition 
    {
    return 0.0;
    }
*/

double power (double base, int exponent ) //declaring and defining  ## 'base' & 'exponent' -parameters ##  identifier 'power'
    {
     double result =1 ;

        for(int i =0;i<exponent;i++)
        {
            result=result * base;
        }
        return result;
    }


    void print_pow(double base, int exponent)
    {
   
    double mypower = power (base, exponent); // -'arguments '
    cout <<base <<"  Raised to the " << exponent <<" power is  "<< mypower<<"\n";

    }

int main () //main function 


{

double base ;
int exponent ;

  cout <<"What is the base ?: ";
    cin >> base; 
    cout <<"What is the exponent?: ";
    cin >> exponent;

    print_pow(base,exponent);
}



### void function does not return anything so we can just 



/*
#include<cmath>
using std::cout;
using std::endl;
using std::cin;//console in


//double power (double , int) -- declation [must be at the start of our program ]

/*double power (double base, int exponent ) // definition 
    {
    return 0.0;
    }
*/

double power (double base, int exponent ) //declaring and defining  ## 'base' & 'exponent' -parameters ##  identifier 'power'
    {
     double result =1 ;

        for(int i =0;i<exponent;i++)
        {
            result=result * base;
        }
        return result;
    }

int main () //main function 


{
    int base, exponent; 
    cout <<"What is the base ?: ";
    cin >>base; 
    cout <<"What is the exponent?: ";
    cin>>exponent;
    double mypower = power (base, exponent); // -'arguments '
    cout << mypower<<endl;

}


*/

15 DATA TYPES
INTEGRAL integer based larger int 
CHAR -characters 
STRINGS -SEQUENCES OF characters
FLOATING POINT-fractional numbers /like double 
BOOL-T/F [true or false]
ARRAYS -multiple data of data type
STRUCTS -allow us to create a custom type 
CLASSES -allow us to create a custom type 
VECTORS 
UNIONS 


### CLASS-IS LIKE A BLUEPRINT DESCRIBING A STRUCTURE 
### OBJECT  -IS AN INSTANCE OF A CLASS

//STATIC FOR C++ - 

//int x is stuck all the time at compile time with int type of data for x


16 INTEGRAL DATA TYPES

MOST BASIC INTEGRAL DATA TYPE "INT"

signed numbers -negative numbers


17 Integral Data types Hands On

short a ; //8 bits 
int b; //at least 16 bits 
long c ; //at least 32 bits 
long long d; //at least 64 bits

//short <=int <=long <=long long 


// unsigned is for only positive extened numbers 
unsigned short aa;
unsigned int bb;
unsigned long cc;
unsigned long long dd;


char 
unsigned char 


/*#include<climits>  +  command SHRT_MAX (positive ) USHRT_MAX(extended positive)
 SHRT_MIN (negative)
See the memory allocation */ 

18 CHar 

19 Escape SEQUENCES 

"\t" -creates space 
"\b" -delete a character
"\n" -to the next line 
"\0" -null terminating character indicating the end of c style string 
(native to c and stil available in c++ ) [stops the sting not to cross point of memory]

' \" [nachalo]  \" [krai]' -slaga kavichki 
"\\" -backslash 

### 20 BOOL / boolean 

### 21 Types of floating type of numbers 
float a ; - 7.7E4 - E4 -move 7  ,4 place to the left 
double b;
long double ; 


how to check up until how many digits is trustworthy 
you need "#include <float.h>" +command for float = FLT_DIG' for double = 'DBL_DIG'



#### 22 CONSTANCE 

 const -read only 
 define X 10 - [macros] pri bibliotekite se definira 
examp const int x =5; -posle ne moje da se promenq 

enum {} -type of constant 

### 23 - Numeric Functions

#include <cmath>  + comand 'sqrt' -square root

-nan -za otricatelni chisla  +sqrt 
-inf  // infinity-za ogromni chisla +pow 
negative infinity -inf 
// command remainder 
returns the remains from division like % --za chisla s double primerno3.15

command fmax -comparing giving the largest 
command fmin -comparing giving the smallest 

command ceil -- rounds a number 
command  floor -removes the decimal value ',' and rouns to lower negative value 
command  trunc-with negative value maha desetichnata zapeteq
command round - rounds a number 

### 24 Strings 
string class is superiour 
c string -from c language 

string concationation -combining strings together
append to a string -to add to the original variable command '+='

'length()' -vrushta kolko sa char-ovete v string .
s '.' -moje da vikame funkciq ot class 

methods -are just functions attached to an object 
primer /greetings.'length()'/ -- //method to object greetings from class 'string'
functions -are alone  

char richard[] = "Caleb" ; //c string ==array of characters  --taka definirani ima samo 6 char 

#include<string>
using std::cout;
using std::endl;
using std::cin;//console in


int main ()
{
   
   std::string greeting ="Hello ";
   std::string greetings  = greeting + "there"; 
    cout << greetings << std::endl;
    cout << greetings.length() <<std::endl;

    char richard[] = "Caleb" ; //c string ==array of characters  --taka definirani ima samo 6 char 
    

}


### 25 String for user input 

std::string greeting;
   getline(std::cin ,greeting);
   cout <<greeting <<endl;


### 26 String methods 
.size-get a lenght of a string
.lenght -get a lenght of a string

--Modifiers 
'+=' --dobavq kum variable-a 

'.append ()' --dobavq kum variable-a

'.insert()' -insert a string primerno 
            std::string greeting = "Hello";
            greeting.insert (3,"  ") ; -sled 3tiq char hel shte ima stringa ili nashiq paket ->" "
            cout <<greeting.size() <<endl; 

'.erase()' - kato insert samo che trie 

--za posledniq ako iskame da iztriem 
std::string greeting = "Hello";
greeting.erase (greeting.lenght() -1) ; -lenght ne chete ot 0 kato indexite toest na 
'h -1 e-2 l-3 l-4 o-5' a programata go chete h-0 ,e-1 ,l-2 ,l-3,o-4
cout <<greeting.size() <<endl;

'.replace()' 
 std::string greeting = "Hello";
   greeting.replace (0 //size ,4 //lenght / the word to replace it ->"Heaven") ;
   cout <<greeting <<endl;

##### 27 STRING OPERATION METHODS    

   std::string greeting = "What the hell";

    greeting.find("hell"); -tursi opredeleni dum 
greeting.replace(greeting.find("hell") ,4,"Much wow"); //tuk ,slagame tursachkata na mqstoto na indeksa koito iskame [za da si go nameri]

   cout<<greeting <<endl;


 method substr  
.substr(5,2) - vadi ot string-a opr chast // '5' e indeksa // '2' kolko e dulga dumata/chasta

method find_first_of - namera char kudeto i da e 

   std::string greeting = "What the hell";
    std::cout << greeting.find_first_of ("aeoua") <<std::endl; -shte vurne 2 ,zashtoto 'a' e na indeks '2'
    --W-0 ,h-1 ,a-2<<---

npos - not found -dava mn golqmo chislo -- ravno  e na unsigned long = -1 koeto ne stava,polzva se za testing 

FOR COMPARING 
'==' i ".compare"


### 29 HECTAL AND decimal   

### 30 Operators and associativity 
'+'
operands sa obektite varhu koito operarirat operatorite 

// double x = 10./4 // 5+5 e expression /za da izvadim 10 ot 4 -- trqbva da e double i s '.' ;

nqkoi operacii kakto v matematikata sa s prioritet * , / , i tn 
ako imame operatori s ednakva sila toest 5 *5 *3 ,deistviqta pochvat ot lqvo na dqsno 
inache sa ot dqsno na lqvo . Sus skobi force-vame da se prochete purvo 


### 31 summary

working with functions -1 declaration 2definition 3 calling 
fucntion (parameter x,parameter ,y ) -posle ako q vikame 
    {
    kod 
    kod kod
    }
Ako q viknem posle --> fucntion (5 ,3) -tova sa argumenti koito se storvat v parametrite x i y 

###############################
###############################
###############################

####  32 CONTROL FLOW 
     ## Branching - if ()//if else ()//if () ,else if() [we can have multiple]  ,else  [only]
    ### 

########################
#######################

    int main ()
{
     std:: cout <<"How old are you ? ";
   int age;
   std:: cin>>age;
   if (age >13)
   {
       std:: cout <<"You are not old enough\n";
      
   }
        else if (age < 19)
        {
            std:: cout << "You are almost\n";
        }
            else 
            {
                std:: cout << "False\n";
            }
            
    return 0;

 
}   
########################
#######################

    #####################
    Logical Operator
&& -AND
|| -OR 
!-revert truth NOT 

########################
#######################

 std:: string name_answer = "Claire" ;
    std:: string name_guess ;
    std:: cout<<"Gues the name!: " ;
    std:: cin >>name_guess;

    int age_answer = 26; 
    int age_guess;
    std:: cout <<"Guess my age!? : " ;
    std:: cin >> age_guess;

########################
#######################

if (!(name_guess == name_answer) || age_guess == age_answer) -tuk vzima name guess-a dali e za imeto i go pravi da ne e vqrno 
//toest ako napishem Claire shte e greshno,no vsqko drugo ime shte e vqrno smiley face

if ((name_guess != name_answer) || age_guess == age_answer)

    ####################
     switch  statements //uses only integral type polezno e primerno za menu [izbirame ot 1 do 3 primerno ]
        {
            case1 : //code break ;
            case 2 : // code break ;
            case 2 : // code break ; 
        }

enum --actually stores possible values as integral types //used for a series of pottential options
enum class --just a little bit better ,zashtoto ogranichavame primerno summer samo ako slojim 'Season::' purvo

########################
#######################

  enum class Season {summer,spring,fall ,winter};
   Season now =Season::winter;
   
   
        switch(now)
        {
        case Season::summer:
            break;
        case Season::spring: 
            break;
        case Season::fall:
            break;  
        case Season::winter:
        std:: cout << "Stay warm ! ";
            break;  
        default:  
            break;
        } 

########################
#######################


############# Looping  - while ,for ,do -while statements 



##### Loops 
initilization
Condition
update

while / do while loop /for loop 

37 ### For Loops 

########################
#######################

int main ()
{
    int fact =5;
    int factorial =fact;
  for (int i=factorial -1 ;i > 0 ; i--)
    {
        
        factorial = factorial * i;
    }
    std:: cout <<"factorial of "<<fact<<" is : " << factorial <<::endl;
    return 0;
}

########################
#######################

//factorial of5 is : 120

38 #### While looops

########################
#######################

    int main ()
    {
    int factorial =5 ;
    int i =factorial - 1 ;
    while (i>1)
        {
            factorial *=i;
            i--;
        }

        std::cout<<factorial <<std::endl;
    }
########################
#######################

39 #### Do While Loop -use it when you want something to happen at least one .Login or username password 
########################
#######################

    std:: string password ="hellotacos123";
    std:: string guess;
    do 
    {
        std::cout<<"Type the password : ";
        std::cin>>guess;
    } while (guess !=password);

        std::cout<<"Password matched !"<<std::endl;
        ########################
#######################

40 ####   Return and break keywords 
break-will break a loop 
continue -preskacha iteration-a ,toest ako iskame neshto da preskochim bukva i tn v string primerno ,shte go preskochim  

41 ### Condition operator '?' + 'true statement : not true statement"
########################
#######################
int answer =11;
std::cout<< "Guess the number : ";
int guess;
std::cin>>guess;
//or int points = guess == answer ? 10 : 0 ;

guess == answer ? std::cout <<"You got it right\n" : std::cout <<"Try agian";

########################
#######################

42 ########### INTRO TO OUR APP 

for menu -- do -while loop 
operate the menu switch statement 
while loop -for the guessing 
if -if the answer is correct break out 
for -keep track of guesses and stores them in an array and prints them


return 0  - is the option 'quit' even if we have code after that 

43-44 #### Developing our app
Menu - DO - SWTICH S CASE-OVE [i FUNCTIQTA] ZA OPCIITE  -WHILE 
FUNCIQTA-generira random chislo koeto trqbva da se poznae 
/while 
    if 
    else if 
    else
/    

45 ### -INTRO TO ARRAYS AND VECTORS 
if we want to keep track of user input ,we can use arrays and VECTORS

Array and   Vectors 
templatized aray

#Aray 
int guess [100] - '100'size 
--index //vseki element ima indeks ,array pochva ot index 0 /ako iskame da minem prez 'array size - 1'
array is statically sized -kato se kompilira e veche setnat

--templatized array =normal array wrapped in an object 


##Vectors or Lists in other programing languages 
--dynamic array
--dynamically sized 
--vectors are basically an array but you can add more elements as you go 
--know its size 


46 ######  Arrays and working with them 
########################
#######################


	int guesses[] ={0,1,2,3,4};

    int num_elements=5;
	int size =sizeof(guesses)/sizeof(guesses[0]);
	std::cout << size<<std::endl;

	for(int i=0;i<num_elements;i++)
	{

		std::cout<< guesses[i]<<"\t";
	} 
	return 0;

########################
#######################

/*
    int num_elements=5;
	int size =sizeof(guesses)/sizeof(guesses[0]);
	std::cout << size<<std::endl;

	for(int i=0;i<num_elements;i++)
	{

		std::cout<< guesses[i]<<"\t";
	} */


	/*int num_elements= 5;
	guesses[0] =10 ;
	std::cin>>guesses[0];
	std::cout<<guesses[0]<<std::endl;
	return 0;
	*/
########################
#######################

 47 ####    Passing arrays to functions 
 when you pass an array to a function it losses its sense for size 


void print_array(int array[])
    {
        std::cout<<sizeof(array)<<endl;
// --v tozi sluchai array guesses go predavame na funkciqta print_array i sled tova sizeof stava ne znachitelen zashtoto gubim kolko tochno e array-a
//Ako array-a e vuv funciqta shteshe da znaem kolko golqm kato razmer (memory) e array-a
    }


int main ()
{


   
	int guesses[] ={0,1,2,3,4};
    std::cout<<sizeof(guesses)<<std::endl;
    print_array(guesses);
}

########################
#######################
#include <iostream>
using std::cout;
using std::endl;
using std::cin;//console in
void print_array(int array[], int size)
    {
        for(int i =0; i < size; i++)
        {

            std::cout << array[i] <<"\t";
        }
    
    std::cout << "\n";
    }


int main ()
{


   
	int guesses[] ={0,1,2,3,4};
    int size= sizeof(guesses)/sizeof(guesses[0]); //tuk moje i sizeof(int) nakraq
    print_array(guesses,size);
}

########################
#######################

48 ###### Printing an array from user input 
 loop to [userinput] input into an array 

########################
#######################
#include <iostream>
#include <limits>
using std::cout;
using std::endl;
using std::cin;//console in

void print_array(int array[], int size)
    {
        for(int i =0; i < size; i++)
        {

            std::cout << array[i] <<"\t";
        }
    
    std::cout << std::endl;
    }


int main ()
{


    const int SIZE =10;
	int guesses[SIZE];
   
   int count=0;
    
    for(int i=0;i<SIZE;i++)
    {
         if(std::cin>>guesses[i])
         {
             count++;
             //input worked 
         }   
         else 
         {
             //invalid charakter
             break;
         }

    }

    
  print_array(guesses,count);
  std::cin.clear(); /*zashtoto cin ako e false-->   'if(std::cin>>guesses[i])' ,
  ostava vuv visqsht state zashtoto primerno sme slojili bukva vmesto chislo ,i tazi bukva ili neshto != chislo shte budi v sledvashtite proizvejdaniq*/

  std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\n'); //po hubaviq variant na 'std::cin.ignore(1000,'\n'); ' //

  std::string test_leftoverstuff;
  std::cin>>test_leftoverstuff;
  std::cout<<test_leftoverstuff<<std::endl;

  return 0;
}
########################
#######################

49 ###### Using Array to Keep Track of Guessing for our Mini Game Guess
########################
#######################

#include <iostream>
#include<climits>
#include<cmath>
#include<string>
#include<cstdlib>
#include<ctime>

using std::cout;
using std::endl;
using std::cin;//console in

void print_array (int array [],int count)
    {
        for (int i=0;i<count;i++)
            {
                std::cout<<"Your guesses so far : "<<array[i] <<"\t";
            }
            std::cout <<"\n";
    }
void play_game()
{


    int guesses[251];
    int guess_count=0;

    int random = rand() % 251;
    std::cout<<random <<std::endl;
    std::cout<<"Guess the number : ";
    while(true)
    {
        int guess;
        std::cin>>guess;

        guesses[guess_count++] = guess;//guess_count v sluchaq ni e 'i' -pochva ot 0 koito go uvelichavame vseki put kogato vkarame -'guess'
        //moje i guess_count; tuk ,na tozi red 
        //Ako slojim '++guess_count -purvo shte  incrementira,toest nashiq 'i' koito e guess_count shte go incrementira,i shte assigne guess-a ni na sledvashtiq indeks ='i'/guess_count      
        if(guess==random)
        {
            std::cout <<"You win!\n";
            break;
        } 
        else if ( guess < random )
        {
            std::cout<<"Your number is too low\n";
        } else 
        {
            std::cout<<"Your number is too high\n";
        }
    }

    print_array(guesses,guess_count);
}




int main ()
{

 srand(time(NULL));
    int choice ;
    do 
    {
    std::cout <<"0. Quit" << std::endl <<"1. Play Game\n";
    std::cin >>choice;

      switch(choice )
      {
            case 0:
            std::cout << "Thanks for nothing\n";
            return 0;
            
            case 1:
            play_game();
            break;

            case 2:
            std::cout<<"settings\n";
            break;
      }

    }
    while(choice!=0);
    
 
}
########################
#######################

##### 50 Vectors 
--Size is dynamic 
// std::vector<int> items={12,13} ; -'<' and '>' -are part of standart template library (collection of classses that gives us functionality for development)
// '<int>' -templatized data structure -we are passing what data type to data structure vector : ) 


//special method for vector --> 'items.push_back(100)' //we are adding value '100' to the vector so std::vector<int> items={12,13,100} ;
//whenever we add a new element into already defined vector ,behind the scenes memory is being adjusted to all new values 

//How to get an element from a vector -- 'items[2] -pak raboti s indeksi so ... from items={12,13,100} -- items[2] e 100 

//Vectors actually knows their size --> items.size() -samo che ne e sprqmo indeksite toest broi 1,2,3 and 0,1,2

//items.size()

//items[items.size()-1] --kak da vzemem posledniq element (zashtoto indeksa e ot 0 ...) //<data[data.size()-1]



##### 51 Vectors -creating a vector 
########################
#######################
#include <vector>
using std::cout;
using std::endl;

using std::cin;//console in

int main ()
{

std::vector<int> data ={1,2,3};
data.push_back(12);
std::cout<<data[data.size()-1]<<std::endl;
data.pop_back();//methoda  shte mahne posledniq element  //drugi methodi na capacity v  https://www.geeksforgeeks.org/vector-in-cpp-stl/
std::cout<<data.size()<<std::endl;

}
########################
#######################


##### 52 Passing a Vector into a function

########################
#######################
#include <vector>
using std::cout;
using std::endl;

using std::cin;//console in

void print_vector(std::vector<int> & data)
 //vajno e da se otbeleji che kato se vikne *(doly)..........+tuk //mojem da dobavim tuk '&data -koeto shte nasledi(izpolzva) data ot main ,
 // [naricha se passing by refference ] ,spestqvame memory zashtoto ne e nujno array da se kopira nanovo samo za funkciqta
{
    data.push_back(12);
    for(int i=0;i< data.size();i++)
    {
        std::cout<<data[i]<<"\t";
    }
    std::cout<<"\n";
}

int main ()
{

std::vector<int> data ={1,2,3}; 
print_vector(data); //* kato se vikne tuk samo valuetata 1,2,3 v main se vikat zashtoto ne zavisim ot valuetata vuv funkciqta +(gore)
print_vector(data); 
print_vector(data); 
print_vector(data); 

}
########################
#######################


### 53 -Refactoring the Guessing Game /with vectors instead of array
C--_VSCode_Calleb_Curry -repository uploaded for the change

### 54  STL ARRAYS-STANDART templatized ARRAYS --between array and vector *

--  std::array<int,5> //templatized array syntax 
//they are statically sized 
//they remember their lenght
///it works as array wrapped in an object

// std::array <int ,5> ages  ={1,2,3};
 
//We STL Arrays we can do : ages[0]-za purviq element ; ages.size()  --which size is a method since it is called by object ages which is a templatized array

### 55 STL ARRAYS in PRACTISE

std::array<int, 20> data = {1,2,3}; -'<int,20 (size-a)'>