// using namespace std; for naming convention and preventing naming issues 
//cout is a object (cookie) from class [ostream] (cookie cutter) -prints user input
//cin is an object (cookie ) from class [istream] -reads user input
//operators works 

#include <iostream>

using namespace std; //using directive 'std'-using standart namespace
using std::cout ;//


10 /// Using Functions 
main function -

argument -input 
function -machine 
output is the return 

/*

#include <iostream>
using std::cout;
using std::endl;
using std::cin;//console in

int main () //main function 


{
    int slices; //declaration initilization
    cout <<"Enter how many slices :";
    cin >>slices;
    std::cout <<"You have "<< slices  << " slices of pizza" << endl;
    int children =slices + 1;
    cout <<"Children have "<< children <<" slices off pizza" <<endl;  
}

*/


11// Creating Function 
function definition 
function declaration
header //can different class
definition  //can different class


in fuction (argument 1 ,argument 2) -argument 1 and 2 are stored in parameters 

/*
int main () //main function 


{
    int base, exponent; 
    cout <<"What is the base ?: ";
    cin >>base; 
    cout <<"What is the exponent?: ";
    cin>>exponent;

  double power = pow(base, exponent);
    cout << power<<endl;

}
*/


#### Creating a function 

/*
#include<cmath>
using std::cout;
using std::endl;
using std::cin;//console in


//double power (double , int) -- declation [must be at the start of our program ]

/*double power (double base, int exponent ) // definition 
    {
    return 0.0;
    }
*/

double power (double base, int exponent ) //declaring and defining  ## 'base' & 'exponent' -parameters ##  identifier 'power'
    {
     double result =1 ;

        for(int i =0;i<exponent;i++)
        {
            result=result * base;
        }
        return result;
    }

int main () //main function 


{
    int base, exponent; 
    cout <<"What is the base ?: ";
    cin >>base; 
    cout <<"What is the exponent?: ";
    cin>>exponent;
    double mypower = power (base, exponent); // -'arguments '
    cout << mypower<<endl;

}


*/