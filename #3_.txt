// using namespace std; for naming convention and preventing naming issues 
//cout is a object (cookie) from class [ostream] (cookie cutter) -prints user input
//cin is an object (cookie ) from class [istream] -reads user input
//operators works 

#include <iostream>

using namespace std; //using directive 'std'-using standart namespace
using std::cout ;//


10 /// Using Functions 
main function -

argument -input 
function -machine 
output is the return 

/*

#include <iostream>
using std::cout;
using std::endl;
using std::cin;//console in

int main () //main function 


{
    int slices; //declaration initilization
    cout <<"Enter how many slices :";
    cin >>slices;
    std::cout <<"You have "<< slices  << " slices of pizza" << endl;
    int children =slices + 1;
    cout <<"Children have "<< children <<" slices off pizza" <<endl;  
}

*/


11// Creating Function 
function definition 
function declaration
header //can different class
definition  //can different class


in fuction (argument 1 ,argument 2) -argument 1 and 2 are stored in parameters 

/*
int main () //main function 


{
    int base, exponent; 
    cout <<"What is the base ?: ";
    cin >>base; 
    cout <<"What is the exponent?: ";
    cin>>exponent;

  double power = pow(base, exponent);
    cout << power<<endl;

}
*/


##### 


#### Creating a function 

#include <iostream>
#include<cmath>
using std::cout;
using std::endl;
using std::cin;//console in


//double power (double , int) -- declation [must be at the start of our program ]

/*double power (double base, int exponent ) // definition 
    {
    return 0.0;
    }
*/

double power (double base, int exponent ) //declaring and defining  ## 'base' & 'exponent' -parameters ##  identifier 'power'
    {
     double result =1 ;

        for(int i =0;i<exponent;i++)
        {
            result=result * base;
        }
        return result;
    }


    void print_pow(double base, int exponent)
    {
   
    double mypower = power (base, exponent); // -'arguments '
    cout <<base <<"  Raised to the " << exponent <<" power is  "<< mypower<<"\n";

    }

int main () //main function 


{

double base ;
int exponent ;

  cout <<"What is the base ?: ";
    cin >> base; 
    cout <<"What is the exponent?: ";
    cin >> exponent;

    print_pow(base,exponent);
}



### void function does not return anything so we can just 



/*
#include<cmath>
using std::cout;
using std::endl;
using std::cin;//console in


//double power (double , int) -- declation [must be at the start of our program ]

/*double power (double base, int exponent ) // definition 
    {
    return 0.0;
    }
*/

double power (double base, int exponent ) //declaring and defining  ## 'base' & 'exponent' -parameters ##  identifier 'power'
    {
     double result =1 ;

        for(int i =0;i<exponent;i++)
        {
            result=result * base;
        }
        return result;
    }

int main () //main function 


{
    int base, exponent; 
    cout <<"What is the base ?: ";
    cin >>base; 
    cout <<"What is the exponent?: ";
    cin>>exponent;
    double mypower = power (base, exponent); // -'arguments '
    cout << mypower<<endl;

}


*/

15 DATA TYPES
INTEGRAL integer based larger int 
CHAR -characters 
STRINGS -SEQUENCES OF characters
FLOATING POINT-fractional numbers /like double 
BOOL-T/F [true or false]
ARRAYS -multiple data of data type
STRUCTS -allow us to create a custom type 
CLASSES -allow us to create a custom type 
VECTORS 
UNIONS 


### CLASS-IS LIKE A BLUEPRINT DESCRIBING A STRUCTURE 
### OBJECT  -IS AN INSTANCE OF A CLASS

//STATIC FOR C++ - 

//int x is stuck all the time at compile time with int type of data for x


16 INTEGRAL DATA TYPES

MOST BASIC INTEGRAL DATA TYPE "INT"

signed numbers -negative numbers


17 Integral Data types Hands On

short a ; //8 bits 
int b; //at least 16 bits 
long c ; //at least 32 bits 
long long d; //at least 64 bits

//short <=int <=long <=long long 


// unsigned is for only positive extened numbers 
unsigned short aa;
unsigned int bb;
unsigned long cc;
unsigned long long dd;


char 
unsigned char 


/*#include<climits>  +  command SHRT_MAX (positive ) USHRT_MAX(extended positive)
 SHRT_MIN (negative)
See the memory allocation */ 

18 CHar 

19 Escape SEQUENCES 

"\t" -creates space 
"\b" -delete a character
"\n" -to the next line 
"\0" -null terminating character indicating the end of c style string 
(native to c and stil available in c++ ) [stops the sting not to cross point of memory]

' \"[nachalo]  \" [krai]' -slaga kavichki 
"\\" -backslash 

### 20 BOOL / boolean 

### 21 Types of floating type of numbers 
float a ; - 7.7E4 - E4 -move 7  ,4 place to the left 
double b;
long double ; 


how to check up until how many digits is trustworthy 
you need "#include <float.h>" +command for float = FLT_DIG' for double = 'DBL_DIG'



#### 22 CONSTANCE 

 const -read only 
 define X 10 - [macros] pri bibliotekite se definira 
examp const int x =5; -posle ne moje da se promenq 

enum {} -type of constant 

### 23 - Numeric Functions

#include <cmath>  + comand 'sqrt' -square root

-nan -za otricatelni chisla  +sqrt 
-inf  // infinity-za ogromni chisla +pow 
negative infinity -inf 
// command remainder 
returns the remains from division like % --za chisla s double primerno3.15

command fmax -comparing giving the largest 
command fmin -comparing giving the smallest 

command ceil -- rounds a number 
command  floor -removes the decimal value ',' and rouns to lower negative value 
command  trunc-with negative value maha desetichnata zapeteq
command round - rounds a number 
